package com.pelni.boarding.ticket.config.security;

import com.pelni.boarding.ticket.config.exception.CustomException;
import com.pelni.boarding.ticket.dto.TokenDto;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;

import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;

@Slf4j
@Component
public class TokenFilter {
    @Value("${app.secret.key}")
    private String secretKey;

    public String generateToken(TokenDto tokenDto) {
        var secret = "061B2F96-762A-4540-9347-FA946A8B0490";
        log.info("Secret key: {}", secret);
        log.info("Secret key: {}", secretKey);
        log.info("Secret key: {}", secret.getBytes());
        try {
            Map<String, Object> claims = new HashMap<>();
            claims.put("userId", tokenDto.getUserId());
            claims.put("firstName", tokenDto.getFirstName());
            claims.put("phoneNumber", tokenDto.getPhoneNumber());
            claims.put("email", tokenDto.getEmail());
            claims.put("office", tokenDto.getOffice());
            claims.put("branch", tokenDto.getBranch());
            claims.put("data", tokenDto.getData());

            return Jwts.builder()
                    .setClaims(claims)
                    .signWith(SignatureAlgorithm.HS256, secretKey.getBytes(StandardCharsets.UTF_8))
                    .compact();
        } catch (Exception e) {
            throw new CustomException("Token generation failed: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    public TokenDto verifyToken(String token) {
        try {
            Claims claims = Jwts.parser()
                    .setSigningKey(secretKey.getBytes(StandardCharsets.UTF_8))
                    .parseClaimsJws(token)
                    .getBody();

            return new TokenDto(
                    claims.get("userId", String.class),
                    claims.get("firstName", String.class),
                    claims.get("phoneNumber", String.class),
                    claims.get("email", String.class),
                    claims.get("office", String.class),
                    claims.get("branch", String.class),
                    claims.get("data", String.class)
            );
        } catch (Exception e) {
            throw new CustomException("Token verification failed: " + e.getMessage(), HttpStatus.UNAUTHORIZED);
        }
    }
}
